window.global = window;
import { my } from '../main.js';
import { init } from 'z3-solver';
const { Context } = await init();

class Pathfinder extends Phaser.Scene {
    constructor() {
        super("pathfinderScene");
    }

    async z3() {
        const { Context } = await init();
        const { Solver, Int, And, Or, Distinct } = new Context("main");
        
        const solver = new Solver();
        const x = Int.const('x');
        const y = Int.const('y');
        const possibleLocations = [];

        solver.add(
            Or(
                And(x.gt(21), x.lt(29), y.gt(17), y.lt(20)),
                And(x.gt(34), x.lt(38), y.gt(2), y.lt(6))
            )
        );        

        if (await solver.check() === 'sat') {
            while (await solver.check() == 'sat') {
                const model = solver.model();
                const xVal = parseInt(model.eval(x).toString());
                const yVal = parseInt(model.eval(y).toString());
                possibleLocations.push([xVal, yVal]);
                console.log(`(${xVal}, ${yVal})`);
                solver.add(Or(x.neq(xVal), y.neq(yVal))); // Prevent duplicate solutions
            }
        } else {
            console.log("No solution found: the constraints may be contradictory.");
        }

        var randomLocation = possibleLocations[Math.floor(Math.random() * this.possibleLocations.length)]

        return randomLocation;
    }

    async preload() {
        // Ensure that z3 is fully loaded and possibleLocations is populated before proceeding
        this.randomLocation = await this.z3();
        console.log(this.randomLocation);
    }

    init() {
        this.TILESIZE = 16;
        this.SCALE = 2.0;
        this.TILEWIDTH = 40;
        this.TILEHEIGHT = 25;
    }

    create() {
        // if (this.possibleLocations && this.possibleLocations.length > 0) {
        //     console.log("Possible locations generated by Z3:", this.possibleLocations);

        //     // Select a random location from the possible locations
        //     var randomLocation = this.possibleLocations[Math.floor(Math.random() * this.possibleLocations.length)];
        //     console.log("Random location:", randomLocation);
        // } else {
        //     console.log("No possible locations found.");
        // }

        // Procedural content creation (add your logic here)

        // Create a new tilemap
        this.map = this.add.tilemap("three-farmhouses", this.TILESIZE, this.TILESIZE, this.TILEHEIGHT, this.TILEWIDTH);

        // Add a tileset to the map
        this.tileset = this.map.addTilesetImage("kenney-tiny-town", "tilemap_tiles");

        // Create the layers
        this.groundLayer = this.map.createLayer("Ground-n-Walkways", this.tileset, 0, 0);
        this.treesLayer = this.map.createLayer("Trees-n-Bushes", this.tileset, 0, 0);
        this.housesLayer = this.map.createLayer("Houses-n-Fences", this.tileset, 0, 0);

        // Create townsfolk sprite
        my.sprite.purpleTownie = this.add.sprite(this.tileXtoWorld(5), this.tileYtoWorld(5), "purple").setOrigin(0,0);
        
        // Camera settings
        this.cameras.main.setBounds(0, 0, this.map.widthInPixels, this.map.heightInPixels);
        this.cameras.main.setZoom(this.SCALE);

        // Create grid of visible tiles for use with path planning
        let tinyTownGrid = this.layersToGrid([this.groundLayer, this.treesLayer, this.housesLayer]);

        let walkables = [1, 2, 3, 30, 40, 41, 42, 43, 44, 95, 13, 14, 15, 25, 26, 27, 37, 38, 39, 70, 84];

        // Initialize EasyStar pathfinder
        this.finder = new EasyStar.js();
        this.finder.setGrid(tinyTownGrid);
        this.finder.setAcceptableTiles(walkables);

        this.activeCharacter = my.sprite.purpleTownie;

        // Handle mouse clicks to make the character move
        this.input.on('pointerup', this.handleClick, this);

        this.cKey = this.input.keyboard.addKey('C');
        this.lowCost = false;
    }

    update() {
        if (this.randomLocation) {
            console.log("Random Location generated by Z3: " + this.randomLocation);
        } else {
            console.log("none found rip");
        }

        
    }

    resetCost(tileset) {
        for (let tileID = tileset.firstgid; tileID < tileset.total; tileID++) {
            let props = tileset.getTileProperties(tileID);
            if (props != null && props.cost != null) {
                this.finder.setTileCost(tileID, 1);
            }
        }
    }

    tileXtoWorld(tileX) {
        return tileX * this.TILESIZE;
    }

    tileYtoWorld(tileY) {
        return tileY * this.TILESIZE;
    }

    layersToGrid() {
        let grid = [];
        // Initialize grid as two-dimensional array
        // TODO: write initialization code

        // Loop over layers to find tile IDs, store in grid
        // TODO: write this loop

        return grid;
    }

    handleClick(pointer) {
        let x = pointer.x / this.SCALE;
        let y = pointer.y / this.SCALE;
        let toX = Math.floor(x / this.TILESIZE);
        let toY = Math.floor(y / this.TILESIZE);
        let fromX = Math.floor(this.activeCharacter.x / this.TILESIZE);
        let fromY = Math.floor(this.activeCharacter.y / this.TILESIZE);
        console.log(`Going from (${fromX},${fromY}) to (${toX},${toY})`);
    
        this.finder.findPath(fromX, fromY, toX, toY, (path) => {
            if (path === null) {
                console.warn("Path was not found.");
            } else {
                console.log(path);
                this.moveCharacter(path, this.activeCharacter);
            }
        });
        this.finder.calculate();
    }
    
    moveCharacter(path, character) {
        var tweens = [];
        for (var i = 0; i < path.length - 1; i++) {
            var ex = path[i+1].x;
            var ey = path[i+1].y;
            tweens.push({
                x: ex * this.map.tileWidth,
                y: ey * this.map.tileHeight,
                duration: 200
            });
        }
    
        this.tweens.chain({
            targets: character,
            tweens: tweens
        });
    }

    setCost(tileset) {
        // TODO: write this function
    }
}

export default Pathfinder;

